# API definition
#
location /showtime {
    set $api_name "showtime";
    proxy_pass  http://showtimes_api/api/v1/showtime;
    proxy_redirect     off;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;
}

location /movie {
    set $api_name "movie";
    proxy_pass  http://movies_api/api/v1/movie;
    proxy_redirect     off;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;
}

location /others {
    set $api_name "movie";
    proxy_pass  http://movies_api/api/v1;
    proxy_redirect     off;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;
}

location /google {
    set $api_name "google";
    proxy_pass  http://www.google.com;
    proxy_redirect     off;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;
    # return 301 http://www.google.com;
}

# # Policy section

# location = /_warehouse {
#     internal;
#     set $api_name "cinema";

#     # Policy configuration here (authentication, rate limiting, logging, more...)

#     proxy_pass http://$upstream$request_uri;
# }

# vim: syntax=nginx